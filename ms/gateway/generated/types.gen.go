// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package generated

import (
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// APIError defines model for APIError.
type APIError struct {
	Error *struct {
		Code        *string `json:"code,omitempty"`
		Description *string `json:"description,omitempty"`
	} `json:"error,omitempty"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {
	Token string `json:"token"`
}

// Комментарий к строчке в спеке
type Comment struct {
	// Уникальный идентификатор пользователя
	AuthorId int `json:"author_id"`

	// Имя пользователя
	AuthorName *string `json:"author_name,omitempty"`

	// Дата публикации комментария
	Date *time.Time `json:"date,omitempty"`

	// Уникальный идентификатор комментария
	Id *int `json:"id,omitempty"`

	// Номер строки в спеке
	RowNumber int `json:"row_number"`

	// Уникальный идентификатор спеки
	SpecId int `json:"spec_id"`

	// Комментарий
	Text string `json:"text"`
}

// Просто превью спеки
type Spec struct {
	// Имя пользователя
	AuthorName string `json:"author_name"`

	// Дата публикации комментария
	Date *time.Time `json:"date,omitempty"`

	// Уникальный идентификатор спеки
	Id *int `json:"id,omitempty"`

	// Название обсуждаемой спеки
	Name string `json:"name"`
}

// Список спецификаций
type SpecList struct {
	Content []Spec `json:"content"`

	// Общее количество элементов
	TotalCount int `json:"totalCount"`
}

// Текст спеки с комментариями
type SpecWithComments struct {
	// Уникальный идентификатор пользователя
	AuthorId int `json:"author_id"`

	// Имя пользователя
	AuthorName *string    `json:"author_name,omitempty"`
	Comments   *[]Comment `json:"comments,omitempty"`

	// Дата публикации комментария
	Date *time.Time `json:"date,omitempty"`

	// Уникальный идентификатор спеки
	Id *int `json:"id,omitempty"`

	// Название обсуждаемой спеки
	Name string `json:"name"`

	// содержание спецификации
	Text string `json:"text"`
}

// LoginError defines model for LoginError.
type LoginError APIError

// LoginRedirectError defines model for LoginRedirectError.
type LoginRedirectError APIError

// NotFoundError defines model for NotFoundError.
type NotFoundError struct {
	Error *struct {
		Code        *string `json:"code,omitempty"`
		Description *string `json:"description,omitempty"`
	} `json:"error,omitempty"`
}

// ServiceError defines model for ServiceError.
type ServiceError APIError

// PatchCommentJSONBody defines parameters for PatchComment.
type PatchCommentJSONBody Comment

// AuthCallbackParams defines parameters for AuthCallback.
type AuthCallbackParams struct {
	// Код доступа Google
	Code string `json:"code"`

	// Статус строки
	State string `json:"state"`
}

// PatchCommentJSONRequestBody defines body for PatchComment for application/json ContentType.
type PatchCommentJSONRequestBody PatchCommentJSONBody

