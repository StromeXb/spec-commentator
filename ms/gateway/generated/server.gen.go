// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package generated

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Метод удаления комментария
	// (DELETE /comments/{comment_id})
	DeleteComment(w http.ResponseWriter, r *http.Request, commentId int)
	// Метод получения комментария
	// (GET /comments/{comment_id})
	PostComment(w http.ResponseWriter, r *http.Request, commentId int)
	// Метод редактирования комментария
	// (PATCH /comments/{comment_id})
	PatchComment(w http.ResponseWriter, r *http.Request, commentId int)
	// Возварт из Google
	// (GET /google-callback)
	AuthCallback(w http.ResponseWriter, r *http.Request, params AuthCallbackParams)
	// Метод для переадресации на страницу логина Google
	// (GET /login)
	AuthLogin(w http.ResponseWriter, r *http.Request)
	// Получить список спек
	// (GET /specs)
	GetSpecList(w http.ResponseWriter, r *http.Request)
	// Метод получения спеки с комментариями
	// (GET /specs/{spec_id})
	GetSpecWithComments(w http.ResponseWriter, r *http.Request, specId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// DeleteComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "comment_id" -------------
	var commentId int

	err = runtime.BindStyledParameter("simple", false, "comment_id", chi.URLParam(r, "comment_id"), &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{"user"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComment(w, r, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostComment operation middleware
func (siw *ServerInterfaceWrapper) PostComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "comment_id" -------------
	var commentId int

	err = runtime.BindStyledParameter("simple", false, "comment_id", chi.URLParam(r, "comment_id"), &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{"user"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostComment(w, r, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchComment operation middleware
func (siw *ServerInterfaceWrapper) PatchComment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "comment_id" -------------
	var commentId int

	err = runtime.BindStyledParameter("simple", false, "comment_id", chi.URLParam(r, "comment_id"), &commentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "comment_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{"user"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchComment(w, r, commentId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AuthCallback operation middleware
func (siw *ServerInterfaceWrapper) AuthCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthCallbackParams

	// ------------- Required query parameter "code" -------------
	if paramValue := r.URL.Query().Get("code"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "code"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", r.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code", Err: err})
		return
	}

	// ------------- Required query parameter "state" -------------
	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthCallback(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AuthLogin operation middleware
func (siw *ServerInterfaceWrapper) AuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AuthLogin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSpecList operation middleware
func (siw *ServerInterfaceWrapper) GetSpecList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{"user"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpecList(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSpecWithComments operation middleware
func (siw *ServerInterfaceWrapper) GetSpecWithComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "spec_id" -------------
	var specId int

	err = runtime.BindStyledParameter("simple", false, "spec_id", chi.URLParam(r, "spec_id"), &specId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "spec_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{"user"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSpecWithComments(w, r, specId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/comments/{comment_id}", wrapper.DeleteComment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/comments/{comment_id}", wrapper.PostComment)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/comments/{comment_id}", wrapper.PatchComment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/google-callback", wrapper.AuthCallback)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/login", wrapper.AuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/specs", wrapper.GetSpecList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/specs/{spec_id}", wrapper.GetSpecWithComments)
	})

	return r
}

